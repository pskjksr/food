import { NextRequest, NextResponse } from "next/server";
import prisma from "../utils/prismaClient";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô GET ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
export async function GET(req: NextRequest) {
  const { searchParams } = new URL(req.url);
  const categoryId = searchParams.get("categoryId");
  const cuisineId = searchParams.get("cuisineId");

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ categoryId ‡πÅ‡∏•‡∏∞ cuisineId ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (
    (categoryId && isNaN(Number(categoryId))) ||
    (cuisineId && isNaN(Number(cuisineId)))
  ) {
    return NextResponse.json(
      { error: "Invalid categoryId or cuisineId." },
      { status: 400 }
    );
  }

  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° categoryId ‡πÅ‡∏•‡∏∞ cuisineId
    const queryConditions: { categoryId?: number; cuisineId?: number } = {};

    if (categoryId) {
      queryConditions.categoryId = Number(categoryId); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    }
    if (cuisineId) {
      queryConditions.cuisineId = Number(cuisineId); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£‡∏à‡∏≤‡∏Å Prisma
    const recipes = await prisma.recipe.findMany({
      where: queryConditions,
      include: {
        cuisine: true,   // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cuisine
        category: true,  // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• category
        ingredients: true, // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ingredients
      },
    });

    // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏π‡∏ï‡∏£
    if (recipes.length === 0) {
      return NextResponse.json({ error: "No recipes found." }, { status: 404 });
    }

    // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£
    return NextResponse.json(recipes);
  } catch (error) {
    console.error("Error fetching recipes:", error);
    return NextResponse.json(
      { error: "Internal server error." },
      { status: 500 }
    );
  }
}


export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    console.log("üì• Received Data:", body); // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

    const { name, description, ingredientDetails, instructions, image, cuisineId, categoryId, ingredients } = body;

    if (!name || !cuisineId || !categoryId || !ingredients || ingredients.length === 0) {
      return NextResponse.json(
        { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Name, Cuisine, Category ‡πÅ‡∏•‡∏∞ Ingredients ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" },
        { status: 400 }
      );
    }

    console.log("üõ† Creating Recipe...");

    const newRecipe = await prisma.recipe.create({
      data: {
        name,
        description,
        ingredientDetails,
        instructions,
        image,
        cuisineId: Number(cuisineId),
        categoryId: Number(categoryId),
        ingredients: {
          create: ingredients.map((ingredient: { name: string; quantity: number }) => ({
            ingredient: { connectOrCreate: { where: { name: ingredient.name }, create: { name: ingredient.name } } },
            quantity: ingredient.quantity,
          })),
        },
      },
    });

    console.log("‚úÖ Recipe Created:", newRecipe); // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return NextResponse.json(newRecipe, { status: 201 });

  } catch (error: any) {
    console.error("‚ùå Error adding recipe:", error);

    return NextResponse.json(
      { error: error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£" },
      { status: 500 }
    );
  }
}
